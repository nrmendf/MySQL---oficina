CREATE DATABASE Oficina;

USE Oficina;

-- Tabela de Clientes
CREATE TABLE Clientes (
    id_cliente INT PRIMARY KEY AUTO_INCREMENT,
    nome VARCHAR(100),
    telefone VARCHAR(15),
    email VARCHAR(100),
    endereco VARCHAR(255)
);

-- Tabela de Veículos
CREATE TABLE Veiculos (
    id_veiculo INT PRIMARY KEY AUTO_INCREMENT,
    id_cliente INT,
    modelo VARCHAR(50),
    marca VARCHAR(50),
    ano INT,
    FOREIGN KEY (id_cliente) REFERENCES Clientes(id_cliente)
);

-- Tabela de Funcionários
CREATE TABLE Funcionarios (
    id_funcionario INT PRIMARY KEY AUTO_INCREMENT,
    nome VARCHAR(100),
    cargo VARCHAR(50),
    salario DECIMAL(10, 2)
);

-- Tabela de Ordens de Serviço
CREATE TABLE Ordens_Servico (
    id_os INT PRIMARY KEY AUTO_INCREMENT,
    id_veiculo INT,
    id_funcionario INT,
    data_abertura DATE,
    data_fechamento DATE,
    status VARCHAR(20),
    FOREIGN KEY (id_veiculo) REFERENCES Veiculos(id_veiculo),
    FOREIGN KEY (id_funcionario) REFERENCES Funcionarios(id_funcionario)
);

-- Tabela de Serviços
CREATE TABLE Servicos (
    id_servico INT PRIMARY KEY AUTO_INCREMENT,
    nome VARCHAR(100),
    descricao TEXT,
    valor DECIMAL(10, 2)
);

-- Tabela de Itens de Serviço (relacionando ordens de serviço e serviços)
CREATE TABLE Itens_Servico (
    id_item INT PRIMARY KEY AUTO_INCREMENT,
    id_os INT,
    id_servico INT,
    quantidade INT,
    valor_total DECIMAL(10, 2),
    FOREIGN KEY (id_os) REFERENCES Ordens_Servico(id_os),
    FOREIGN KEY (id_servico) REFERENCES Servicos(id_servico)
);

-- Tabela de Pagamentos
CREATE TABLE Pagamentos (
    id_pagamento INT PRIMARY KEY AUTO_INCREMENT,
    id_os INT,
    valor_pago DECIMAL(10, 2),
    data_pagamento DATE,
    FOREIGN KEY (id_os) REFERENCES Ordens_Servico(id_os)
);



-- Inserindo Clientes
INSERT INTO Clientes (nome, telefone, email, endereco)
VALUES ('João Silva', '987654321', 'joao@email.com', 'Rua A, 123'),
       ('Maria Oliveira', '912345678', 'maria@email.com', 'Rua B, 456');

-- Inserindo Veículos
INSERT INTO Veiculos (id_cliente, modelo, marca, ano)
VALUES (1, 'Fusca', 'Volkswagen', 1985),
       (2, 'Civic', 'Honda', 2020);

-- Inserindo Funcionários
INSERT INTO Funcionarios (nome, cargo, salario)
VALUES ('Carlos Pereira', 'Mecânico', 3000),
       ('Ana Costa', 'Assistente', 2000);

-- Inserindo Ordens de Serviço
INSERT INTO Ordens_Servico (id_veiculo, id_funcionario, data_abertura, data_fechamento, status)
VALUES (1, 1, '2025-03-15', '2025-03-16', 'Fechada'),
       (2, 2, '2025-03-17', NULL, 'Aberta');

-- Inserindo Serviços
INSERT INTO Servicos (nome, descricao, valor)
VALUES ('Troca de óleo', 'Troca de óleo do motor', 150.00),
       ('Alinhamento de direção', 'Ajuste da direção do veículo', 120.00);

-- Inserindo Itens de Serviço
INSERT INTO Itens_Servico (id_os, id_servico, quantidade, valor_total)
VALUES (1, 1, 1, 150.00),
       (1, 2, 1, 120.00);

-- Inserindo Pagamentos
INSERT INTO Pagamentos (id_os, valor_pago, data_pagamento)
VALUES (1, 270.00, '2025-03-16');




-- Consultando todos os clientes
SELECT * FROM Clientes;


-- Consultando ordens de serviço que ainda estão abertas
SELECT * FROM Ordens_Servico
WHERE status = 'Aberta';


-- Calculando o valor total dos serviços por ordem de serviço
SELECT id_os, SUM(valor_total) AS total_servicos
FROM Itens_Servico
GROUP BY id_os;


-- Consultando serviços ordenados por valor em ordem decrescente
SELECT * FROM Servicos
ORDER BY valor DESC;


-- Encontrando ordens de serviço com total de serviços maior que 200
SELECT id_os, SUM(valor_total) AS total_servicos
FROM Itens_Servico
GROUP BY id_os
HAVING total_servicos > 200;


-- Consultando todos os veículos com seus respectivos clientes e ordens de serviço
SELECT v.modelo, c.nome, os.data_abertura, os.status
FROM Veiculos v
JOIN Clientes c ON v.id_cliente = c.id_cliente
JOIN Ordens_Servico os ON v.id_veiculo = os.id_veiculo;


